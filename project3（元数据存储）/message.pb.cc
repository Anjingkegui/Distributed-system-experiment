// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* dataserverregister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dataserverregister_reflection_ = NULL;
const ::google::protobuf::Descriptor* dataserverinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dataserverinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* filerange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filerange_reflection_ = NULL;
const ::google::protobuf::Descriptor* filelocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filelocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* filedelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filedelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* clusterdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clusterdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* msgcontainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msgcontainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* msgcontainer_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  dataserverregister_descriptor_ = file->message_type(0);
  static const int dataserverregister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverregister, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverregister, port_),
  };
  dataserverregister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dataserverregister_descriptor_,
      dataserverregister::default_instance_,
      dataserverregister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverregister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverregister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dataserverregister));
  dataserverinfo_descriptor_ = file->message_type(1);
  static const int dataserverinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, fip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, fport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, eip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, eport_),
  };
  dataserverinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dataserverinfo_descriptor_,
      dataserverinfo::default_instance_,
      dataserverinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dataserverinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dataserverinfo));
  filerange_descriptor_ = file->message_type(2);
  static const int filerange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, ismsgfromcl_),
  };
  filerange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filerange_descriptor_,
      filerange::default_instance_,
      filerange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filerange));
  filelocation_descriptor_ = file->message_type(3);
  static const int filelocation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, filelen_),
  };
  filelocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filelocation_descriptor_,
      filelocation::default_instance_,
      filelocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filelocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filelocation));
  filedelete_descriptor_ = file->message_type(4);
  static const int filedelete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filedelete, file_),
  };
  filedelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filedelete_descriptor_,
      filedelete::default_instance_,
      filedelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filedelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filedelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filedelete));
  clusterdata_descriptor_ = file->message_type(5);
  static const int clusterdata_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterdata, clusternum_),
  };
  clusterdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clusterdata_descriptor_,
      clusterdata::default_instance_,
      clusterdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clusterdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clusterdata));
  msgcontainer_descriptor_ = file->message_type(6);
  static const int msgcontainer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, frange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, floc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, filedel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, acluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, dregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, dinfo_),
  };
  msgcontainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msgcontainer_descriptor_,
      msgcontainer::default_instance_,
      msgcontainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgcontainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msgcontainer));
  msgcontainer_type_descriptor_ = msgcontainer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dataserverregister_descriptor_, &dataserverregister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dataserverinfo_descriptor_, &dataserverinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filerange_descriptor_, &filerange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filelocation_descriptor_, &filelocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filedelete_descriptor_, &filedelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clusterdata_descriptor_, &clusterdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msgcontainer_descriptor_, &msgcontainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete dataserverregister::default_instance_;
  delete dataserverregister_reflection_;
  delete dataserverinfo::default_instance_;
  delete dataserverinfo_reflection_;
  delete filerange::default_instance_;
  delete filerange_reflection_;
  delete filelocation::default_instance_;
  delete filelocation_reflection_;
  delete filedelete::default_instance_;
  delete filedelete_reflection_;
  delete clusterdata::default_instance_;
  delete clusterdata_reflection_;
  delete msgcontainer::default_instance_;
  delete msgcontainer_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\".\n\022dataserverregister\022\n\n"
    "\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"T\n\016dataserverinf"
    "o\022\n\n\002id\030\001 \001(\005\022\013\n\003fip\030\002 \001(\t\022\r\n\005fport\030\003 \001("
    "\005\022\013\n\003eip\030\004 \001(\t\022\r\n\005eport\030\005 \001(\005\"N\n\tfileran"
    "ge\022\014\n\004file\030\001 \002(\t\022\016\n\006fileID\030\002 \002(\005\022\016\n\006leng"
    "th\030\003 \002(\005\022\023\n\013isMsgFromCL\030\004 \002(\010\"S\n\014fileloc"
    "ation\022\014\n\004file\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030"
    "\003 \001(\005\022\n\n\002fd\030\004 \001(\005\022\017\n\007filelen\030\005 \001(\005\"\032\n\nfi"
    "ledelete\022\014\n\004file\030\001 \001(\t\"!\n\013clusterdata\022\022\n"
    "\nclusternum\030\001 \001(\005\"\372\002\n\014msgcontainer\022#\n\007ms"
    "gtype\030\001 \002(\0162\022.msgcontainer.type\022\032\n\006frang"
    "e\030\002 \001(\0132\n.filerange\022\033\n\004floc\030\003 \001(\0132\r.file"
    "location\022\034\n\007filedel\030\004 \001(\0132\013.filedelete\022\036"
    "\n\010acluster\030\005 \001(\0132\014.clusterdata\022&\n\tdregis"
    "ter\030\006 \001(\0132\023.dataserverregister\022\036\n\005dinfo\030"
    "\007 \001(\0132\017.dataserverinfo\"\205\001\n\004type\022\020\n\014FILEL"
    "OCATION\020\000\022\016\n\nDELETEFILE\020\001\022\r\n\tFILEWRITE\020\002"
    "\022\014\n\010FILEREAD\020\003\022\022\n\016ALLINFORMATION\020\004\022\026\n\022DA"
    "TASERVERREGISTER\020\005\022\022\n\016DATASERVERINFO\020\006", 758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  dataserverregister::default_instance_ = new dataserverregister();
  dataserverinfo::default_instance_ = new dataserverinfo();
  filerange::default_instance_ = new filerange();
  filelocation::default_instance_ = new filelocation();
  filedelete::default_instance_ = new filedelete();
  clusterdata::default_instance_ = new clusterdata();
  msgcontainer::default_instance_ = new msgcontainer();
  dataserverregister::default_instance_->InitAsDefaultInstance();
  dataserverinfo::default_instance_->InitAsDefaultInstance();
  filerange::default_instance_->InitAsDefaultInstance();
  filelocation::default_instance_->InitAsDefaultInstance();
  filedelete::default_instance_->InitAsDefaultInstance();
  clusterdata::default_instance_->InitAsDefaultInstance();
  msgcontainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dataserverregister::kIpFieldNumber;
const int dataserverregister::kPortFieldNumber;
#endif  // !_MSC_VER

dataserverregister::dataserverregister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dataserverregister::InitAsDefaultInstance() {
}

dataserverregister::dataserverregister(const dataserverregister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dataserverregister::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dataserverregister::~dataserverregister() {
  SharedDtor();
}

void dataserverregister::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void dataserverregister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dataserverregister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dataserverregister_descriptor_;
}

const dataserverregister& dataserverregister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

dataserverregister* dataserverregister::default_instance_ = NULL;

dataserverregister* dataserverregister::New() const {
  return new dataserverregister;
}

void dataserverregister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dataserverregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dataserverregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dataserverregister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dataserverregister::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dataserverregister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dataserverregister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dataserverregister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dataserverregister::MergeFrom(const dataserverregister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dataserverregister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataserverregister::CopyFrom(const dataserverregister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataserverregister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dataserverregister::Swap(dataserverregister* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dataserverregister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dataserverregister_descriptor_;
  metadata.reflection = dataserverregister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dataserverinfo::kIdFieldNumber;
const int dataserverinfo::kFipFieldNumber;
const int dataserverinfo::kFportFieldNumber;
const int dataserverinfo::kEipFieldNumber;
const int dataserverinfo::kEportFieldNumber;
#endif  // !_MSC_VER

dataserverinfo::dataserverinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dataserverinfo::InitAsDefaultInstance() {
}

dataserverinfo::dataserverinfo(const dataserverinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dataserverinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fport_ = 0;
  eip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dataserverinfo::~dataserverinfo() {
  SharedDtor();
}

void dataserverinfo::SharedDtor() {
  if (fip_ != &::google::protobuf::internal::kEmptyString) {
    delete fip_;
  }
  if (eip_ != &::google::protobuf::internal::kEmptyString) {
    delete eip_;
  }
  if (this != default_instance_) {
  }
}

void dataserverinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dataserverinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dataserverinfo_descriptor_;
}

const dataserverinfo& dataserverinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

dataserverinfo* dataserverinfo::default_instance_ = NULL;

dataserverinfo* dataserverinfo::New() const {
  return new dataserverinfo;
}

void dataserverinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_fip()) {
      if (fip_ != &::google::protobuf::internal::kEmptyString) {
        fip_->clear();
      }
    }
    fport_ = 0;
    if (has_eip()) {
      if (eip_ != &::google::protobuf::internal::kEmptyString) {
        eip_->clear();
      }
    }
    eport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dataserverinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fip;
        break;
      }

      // optional string fip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fip().data(), this->fip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fport;
        break;
      }

      // optional int32 fport = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fport_)));
          set_has_fport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eip;
        break;
      }

      // optional string eip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eip().data(), this->eip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eport;
        break;
      }

      // optional int32 eport = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eport_)));
          set_has_eport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dataserverinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string fip = 2;
  if (has_fip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fip().data(), this->fip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fip(), output);
  }

  // optional int32 fport = 3;
  if (has_fport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fport(), output);
  }

  // optional string eip = 4;
  if (has_eip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eip().data(), this->eip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eip(), output);
  }

  // optional int32 eport = 5;
  if (has_eport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->eport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dataserverinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string fip = 2;
  if (has_fip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fip().data(), this->fip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fip(), target);
  }

  // optional int32 fport = 3;
  if (has_fport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fport(), target);
  }

  // optional string eip = 4;
  if (has_eip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eip().data(), this->eip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eip(), target);
  }

  // optional int32 eport = 5;
  if (has_eport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->eport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dataserverinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string fip = 2;
    if (has_fip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fip());
    }

    // optional int32 fport = 3;
    if (has_fport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fport());
    }

    // optional string eip = 4;
    if (has_eip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eip());
    }

    // optional int32 eport = 5;
    if (has_eport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dataserverinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dataserverinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dataserverinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dataserverinfo::MergeFrom(const dataserverinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fip()) {
      set_fip(from.fip());
    }
    if (from.has_fport()) {
      set_fport(from.fport());
    }
    if (from.has_eip()) {
      set_eip(from.eip());
    }
    if (from.has_eport()) {
      set_eport(from.eport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dataserverinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dataserverinfo::CopyFrom(const dataserverinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dataserverinfo::IsInitialized() const {

  return true;
}

void dataserverinfo::Swap(dataserverinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(fip_, other->fip_);
    std::swap(fport_, other->fport_);
    std::swap(eip_, other->eip_);
    std::swap(eport_, other->eport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dataserverinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dataserverinfo_descriptor_;
  metadata.reflection = dataserverinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filerange::kFileFieldNumber;
const int filerange::kFileIDFieldNumber;
const int filerange::kLengthFieldNumber;
const int filerange::kIsMsgFromCLFieldNumber;
#endif  // !_MSC_VER

filerange::filerange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filerange::InitAsDefaultInstance() {
}

filerange::filerange(const filerange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filerange::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fileid_ = 0;
  length_ = 0;
  ismsgfromcl_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filerange::~filerange() {
  SharedDtor();
}

void filerange::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void filerange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filerange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filerange_descriptor_;
}

const filerange& filerange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

filerange* filerange::default_instance_ = NULL;

filerange* filerange::New() const {
  return new filerange;
}

void filerange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    fileid_ = 0;
    length_ = 0;
    ismsgfromcl_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filerange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileID;
        break;
      }

      // required int32 fileID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required int32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isMsgFromCL;
        break;
      }

      // required bool isMsgFromCL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMsgFromCL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismsgfromcl_)));
          set_has_ismsgfromcl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filerange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }

  // required int32 fileID = 2;
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fileid(), output);
  }

  // required int32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // required bool isMsgFromCL = 4;
  if (has_ismsgfromcl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ismsgfromcl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filerange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // required int32 fileID = 2;
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fileid(), target);
  }

  // required int32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // required bool isMsgFromCL = 4;
  if (has_ismsgfromcl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ismsgfromcl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filerange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // required int32 fileID = 2;
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileid());
    }

    // required int32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // required bool isMsgFromCL = 4;
    if (has_ismsgfromcl()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filerange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filerange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filerange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filerange::MergeFrom(const filerange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_ismsgfromcl()) {
      set_ismsgfromcl(from.ismsgfromcl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filerange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filerange::CopyFrom(const filerange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filerange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void filerange::Swap(filerange* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(fileid_, other->fileid_);
    std::swap(length_, other->length_);
    std::swap(ismsgfromcl_, other->ismsgfromcl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filerange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filerange_descriptor_;
  metadata.reflection = filerange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filelocation::kFileFieldNumber;
const int filelocation::kIpFieldNumber;
const int filelocation::kPortFieldNumber;
const int filelocation::kFdFieldNumber;
const int filelocation::kFilelenFieldNumber;
#endif  // !_MSC_VER

filelocation::filelocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filelocation::InitAsDefaultInstance() {
}

filelocation::filelocation(const filelocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filelocation::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  fd_ = 0;
  filelen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filelocation::~filelocation() {
  SharedDtor();
}

void filelocation::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void filelocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filelocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filelocation_descriptor_;
}

const filelocation& filelocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

filelocation* filelocation::default_instance_ = NULL;

filelocation* filelocation::New() const {
  return new filelocation;
}

void filelocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    fd_ = 0;
    filelen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filelocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }

      // optional int32 fd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filelen;
        break;
      }

      // optional int32 filelen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filelen_)));
          set_has_filelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filelocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional int32 fd = 4;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }

  // optional int32 filelen = 5;
  if (has_filelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->filelen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filelocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional int32 fd = 4;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fd(), target);
  }

  // optional int32 filelen = 5;
  if (has_filelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->filelen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filelocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int32 filelen = 5;
    if (has_filelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filelen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filelocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filelocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filelocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filelocation::MergeFrom(const filelocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_filelen()) {
      set_filelen(from.filelen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filelocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filelocation::CopyFrom(const filelocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filelocation::IsInitialized() const {

  return true;
}

void filelocation::Swap(filelocation* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(fd_, other->fd_);
    std::swap(filelen_, other->filelen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filelocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filelocation_descriptor_;
  metadata.reflection = filelocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int filedelete::kFileFieldNumber;
#endif  // !_MSC_VER

filedelete::filedelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filedelete::InitAsDefaultInstance() {
}

filedelete::filedelete(const filedelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filedelete::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filedelete::~filedelete() {
  SharedDtor();
}

void filedelete::SharedDtor() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void filedelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filedelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filedelete_descriptor_;
}

const filedelete& filedelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

filedelete* filedelete::default_instance_ = NULL;

filedelete* filedelete::New() const {
  return new filedelete;
}

void filedelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filedelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filedelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filedelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string file = 1;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filedelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filedelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filedelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filedelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filedelete::MergeFrom(const filedelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filedelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filedelete::CopyFrom(const filedelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filedelete::IsInitialized() const {

  return true;
}

void filedelete::Swap(filedelete* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filedelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filedelete_descriptor_;
  metadata.reflection = filedelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clusterdata::kClusternumFieldNumber;
#endif  // !_MSC_VER

clusterdata::clusterdata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clusterdata::InitAsDefaultInstance() {
}

clusterdata::clusterdata(const clusterdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clusterdata::SharedCtor() {
  _cached_size_ = 0;
  clusternum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clusterdata::~clusterdata() {
  SharedDtor();
}

void clusterdata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clusterdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clusterdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clusterdata_descriptor_;
}

const clusterdata& clusterdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

clusterdata* clusterdata::default_instance_ = NULL;

clusterdata* clusterdata::New() const {
  return new clusterdata;
}

void clusterdata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusternum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clusterdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clusternum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clusternum_)));
          set_has_clusternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clusterdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clusternum = 1;
  if (has_clusternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clusternum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clusterdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clusternum = 1;
  if (has_clusternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clusternum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clusterdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clusternum = 1;
    if (has_clusternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clusternum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clusterdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clusterdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clusterdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clusterdata::MergeFrom(const clusterdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusternum()) {
      set_clusternum(from.clusternum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clusterdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clusterdata::CopyFrom(const clusterdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clusterdata::IsInitialized() const {

  return true;
}

void clusterdata::Swap(clusterdata* other) {
  if (other != this) {
    std::swap(clusternum_, other->clusternum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clusterdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clusterdata_descriptor_;
  metadata.reflection = clusterdata_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* msgcontainer_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msgcontainer_type_descriptor_;
}
bool msgcontainer_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const msgcontainer_type msgcontainer::FILELOCATION;
const msgcontainer_type msgcontainer::DELETEFILE;
const msgcontainer_type msgcontainer::FILEWRITE;
const msgcontainer_type msgcontainer::FILEREAD;
const msgcontainer_type msgcontainer::ALLINFORMATION;
const msgcontainer_type msgcontainer::DATASERVERREGISTER;
const msgcontainer_type msgcontainer::DATASERVERINFO;
const msgcontainer_type msgcontainer::type_MIN;
const msgcontainer_type msgcontainer::type_MAX;
const int msgcontainer::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int msgcontainer::kMsgtypeFieldNumber;
const int msgcontainer::kFrangeFieldNumber;
const int msgcontainer::kFlocFieldNumber;
const int msgcontainer::kFiledelFieldNumber;
const int msgcontainer::kAclusterFieldNumber;
const int msgcontainer::kDregisterFieldNumber;
const int msgcontainer::kDinfoFieldNumber;
#endif  // !_MSC_VER

msgcontainer::msgcontainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msgcontainer::InitAsDefaultInstance() {
  frange_ = const_cast< ::filerange*>(&::filerange::default_instance());
  floc_ = const_cast< ::filelocation*>(&::filelocation::default_instance());
  filedel_ = const_cast< ::filedelete*>(&::filedelete::default_instance());
  acluster_ = const_cast< ::clusterdata*>(&::clusterdata::default_instance());
  dregister_ = const_cast< ::dataserverregister*>(&::dataserverregister::default_instance());
  dinfo_ = const_cast< ::dataserverinfo*>(&::dataserverinfo::default_instance());
}

msgcontainer::msgcontainer(const msgcontainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msgcontainer::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0;
  frange_ = NULL;
  floc_ = NULL;
  filedel_ = NULL;
  acluster_ = NULL;
  dregister_ = NULL;
  dinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msgcontainer::~msgcontainer() {
  SharedDtor();
}

void msgcontainer::SharedDtor() {
  if (this != default_instance_) {
    delete frange_;
    delete floc_;
    delete filedel_;
    delete acluster_;
    delete dregister_;
    delete dinfo_;
  }
}

void msgcontainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msgcontainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msgcontainer_descriptor_;
}

const msgcontainer& msgcontainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

msgcontainer* msgcontainer::default_instance_ = NULL;

msgcontainer* msgcontainer::New() const {
  return new msgcontainer;
}

void msgcontainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0;
    if (has_frange()) {
      if (frange_ != NULL) frange_->::filerange::Clear();
    }
    if (has_floc()) {
      if (floc_ != NULL) floc_->::filelocation::Clear();
    }
    if (has_filedel()) {
      if (filedel_ != NULL) filedel_->::filedelete::Clear();
    }
    if (has_acluster()) {
      if (acluster_ != NULL) acluster_->::clusterdata::Clear();
    }
    if (has_dregister()) {
      if (dregister_ != NULL) dregister_->::dataserverregister::Clear();
    }
    if (has_dinfo()) {
      if (dinfo_ != NULL) dinfo_->::dataserverinfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msgcontainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msgcontainer.type msgtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msgcontainer_type_IsValid(value)) {
            set_msgtype(static_cast< ::msgcontainer_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frange;
        break;
      }

      // optional .filerange frange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_floc;
        break;
      }

      // optional .filelocation floc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_floc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filedel;
        break;
      }

      // optional .filedelete filedel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filedel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filedel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_acluster;
        break;
      }

      // optional .clusterdata acluster = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acluster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dregister;
        break;
      }

      // optional .dataserverregister dregister = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dregister()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dinfo;
        break;
      }

      // optional .dataserverinfo dinfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msgcontainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .msgcontainer.type msgtype = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .filerange frange = 2;
  if (has_frange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frange(), output);
  }

  // optional .filelocation floc = 3;
  if (has_floc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->floc(), output);
  }

  // optional .filedelete filedel = 4;
  if (has_filedel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->filedel(), output);
  }

  // optional .clusterdata acluster = 5;
  if (has_acluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->acluster(), output);
  }

  // optional .dataserverregister dregister = 6;
  if (has_dregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dregister(), output);
  }

  // optional .dataserverinfo dinfo = 7;
  if (has_dinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msgcontainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .msgcontainer.type msgtype = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .filerange frange = 2;
  if (has_frange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frange(), target);
  }

  // optional .filelocation floc = 3;
  if (has_floc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->floc(), target);
  }

  // optional .filedelete filedel = 4;
  if (has_filedel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->filedel(), target);
  }

  // optional .clusterdata acluster = 5;
  if (has_acluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->acluster(), target);
  }

  // optional .dataserverregister dregister = 6;
  if (has_dregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dregister(), target);
  }

  // optional .dataserverinfo dinfo = 7;
  if (has_dinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msgcontainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .msgcontainer.type msgtype = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .filerange frange = 2;
    if (has_frange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frange());
    }

    // optional .filelocation floc = 3;
    if (has_floc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->floc());
    }

    // optional .filedelete filedel = 4;
    if (has_filedel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filedel());
    }

    // optional .clusterdata acluster = 5;
    if (has_acluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acluster());
    }

    // optional .dataserverregister dregister = 6;
    if (has_dregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dregister());
    }

    // optional .dataserverinfo dinfo = 7;
    if (has_dinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msgcontainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msgcontainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msgcontainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msgcontainer::MergeFrom(const msgcontainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_frange()) {
      mutable_frange()->::filerange::MergeFrom(from.frange());
    }
    if (from.has_floc()) {
      mutable_floc()->::filelocation::MergeFrom(from.floc());
    }
    if (from.has_filedel()) {
      mutable_filedel()->::filedelete::MergeFrom(from.filedel());
    }
    if (from.has_acluster()) {
      mutable_acluster()->::clusterdata::MergeFrom(from.acluster());
    }
    if (from.has_dregister()) {
      mutable_dregister()->::dataserverregister::MergeFrom(from.dregister());
    }
    if (from.has_dinfo()) {
      mutable_dinfo()->::dataserverinfo::MergeFrom(from.dinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msgcontainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgcontainer::CopyFrom(const msgcontainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgcontainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_frange()) {
    if (!this->frange().IsInitialized()) return false;
  }
  if (has_dregister()) {
    if (!this->dregister().IsInitialized()) return false;
  }
  return true;
}

void msgcontainer::Swap(msgcontainer* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(frange_, other->frange_);
    std::swap(floc_, other->floc_);
    std::swap(filedel_, other->filedel_);
    std::swap(acluster_, other->acluster_);
    std::swap(dregister_, other->dregister_);
    std::swap(dinfo_, other->dinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msgcontainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msgcontainer_descriptor_;
  metadata.reflection = msgcontainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
