// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class dataserverregister;
class dataserverinfo;
class filerange;
class filelocation;
class msgcontainer;

enum msgcontainer_type {
  msgcontainer_type_FILELOCATION = 0,
  msgcontainer_type_FILEREAD = 1,
  msgcontainer_type_FILEWRITE = 2,
  msgcontainer_type_DATASERVERREGISTER = 3,
  msgcontainer_type_DATASERVERINFO = 4
};
bool msgcontainer_type_IsValid(int value);
const msgcontainer_type msgcontainer_type_type_MIN = msgcontainer_type_FILELOCATION;
const msgcontainer_type msgcontainer_type_type_MAX = msgcontainer_type_DATASERVERINFO;
const int msgcontainer_type_type_ARRAYSIZE = msgcontainer_type_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* msgcontainer_type_descriptor();
inline const ::std::string& msgcontainer_type_Name(msgcontainer_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    msgcontainer_type_descriptor(), value);
}
inline bool msgcontainer_type_Parse(
    const ::std::string& name, msgcontainer_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msgcontainer_type>(
    msgcontainer_type_descriptor(), name, value);
}
// ===================================================================

class dataserverregister : public ::google::protobuf::Message {
 public:
  dataserverregister();
  virtual ~dataserverregister();

  dataserverregister(const dataserverregister& from);

  inline dataserverregister& operator=(const dataserverregister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dataserverregister& default_instance();

  void Swap(dataserverregister* other);

  // implements Message ----------------------------------------------

  dataserverregister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dataserverregister& from);
  void MergeFrom(const dataserverregister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataserverregister)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static dataserverregister* default_instance_;
};
// -------------------------------------------------------------------

class dataserverinfo : public ::google::protobuf::Message {
 public:
  dataserverinfo();
  virtual ~dataserverinfo();

  dataserverinfo(const dataserverinfo& from);

  inline dataserverinfo& operator=(const dataserverinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dataserverinfo& default_instance();

  void Swap(dataserverinfo* other);

  // implements Message ----------------------------------------------

  dataserverinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dataserverinfo& from);
  void MergeFrom(const dataserverinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string fip = 2;
  inline bool has_fip() const;
  inline void clear_fip();
  static const int kFipFieldNumber = 2;
  inline const ::std::string& fip() const;
  inline void set_fip(const ::std::string& value);
  inline void set_fip(const char* value);
  inline void set_fip(const char* value, size_t size);
  inline ::std::string* mutable_fip();
  inline ::std::string* release_fip();
  inline void set_allocated_fip(::std::string* fip);

  // optional int32 fport = 3;
  inline bool has_fport() const;
  inline void clear_fport();
  static const int kFportFieldNumber = 3;
  inline ::google::protobuf::int32 fport() const;
  inline void set_fport(::google::protobuf::int32 value);

  // optional string eip = 4;
  inline bool has_eip() const;
  inline void clear_eip();
  static const int kEipFieldNumber = 4;
  inline const ::std::string& eip() const;
  inline void set_eip(const ::std::string& value);
  inline void set_eip(const char* value);
  inline void set_eip(const char* value, size_t size);
  inline ::std::string* mutable_eip();
  inline ::std::string* release_eip();
  inline void set_allocated_eip(::std::string* eip);

  // optional int32 eport = 5;
  inline bool has_eport() const;
  inline void clear_eport();
  static const int kEportFieldNumber = 5;
  inline ::google::protobuf::int32 eport() const;
  inline void set_eport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataserverinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fip();
  inline void clear_has_fip();
  inline void set_has_fport();
  inline void clear_has_fport();
  inline void set_has_eip();
  inline void clear_has_eip();
  inline void set_has_eport();
  inline void clear_has_eport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 fport_;
  ::std::string* eip_;
  ::google::protobuf::int32 eport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static dataserverinfo* default_instance_;
};
// -------------------------------------------------------------------

class filerange : public ::google::protobuf::Message {
 public:
  filerange();
  virtual ~filerange();

  filerange(const filerange& from);

  inline filerange& operator=(const filerange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const filerange& default_instance();

  void Swap(filerange* other);

  // implements Message ----------------------------------------------

  filerange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const filerange& from);
  void MergeFrom(const filerange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // required int32 fileID = 2;
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIDFieldNumber = 2;
  inline ::google::protobuf::int32 fileid() const;
  inline void set_fileid(::google::protobuf::int32 value);

  // required int32 segno = 3;
  inline bool has_segno() const;
  inline void clear_segno();
  static const int kSegnoFieldNumber = 3;
  inline ::google::protobuf::int32 segno() const;
  inline void set_segno(::google::protobuf::int32 value);

  // required int32 offset = 4;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 length = 5;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 5;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // required bool isMsgFromCL = 6;
  inline bool has_ismsgfromcl() const;
  inline void clear_ismsgfromcl();
  static const int kIsMsgFromCLFieldNumber = 6;
  inline bool ismsgfromcl() const;
  inline void set_ismsgfromcl(bool value);

  // @@protoc_insertion_point(class_scope:filerange)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_fileid();
  inline void clear_has_fileid();
  inline void set_has_segno();
  inline void clear_has_segno();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_ismsgfromcl();
  inline void clear_has_ismsgfromcl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_;
  ::google::protobuf::int32 fileid_;
  ::google::protobuf::int32 segno_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 length_;
  bool ismsgfromcl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static filerange* default_instance_;
};
// -------------------------------------------------------------------

class filelocation : public ::google::protobuf::Message {
 public:
  filelocation();
  virtual ~filelocation();

  filelocation(const filelocation& from);

  inline filelocation& operator=(const filelocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const filelocation& default_instance();

  void Swap(filelocation* other);

  // implements Message ----------------------------------------------

  filelocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const filelocation& from);
  void MergeFrom(const filelocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 segno = 1;
  inline bool has_segno() const;
  inline void clear_segno();
  static const int kSegnoFieldNumber = 1;
  inline ::google::protobuf::int32 segno() const;
  inline void set_segno(::google::protobuf::int32 value);

  // optional string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 fd = 5;
  inline bool has_fd() const;
  inline void clear_fd();
  static const int kFdFieldNumber = 5;
  inline ::google::protobuf::int32 fd() const;
  inline void set_fd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:filelocation)
 private:
  inline void set_has_segno();
  inline void clear_has_segno();
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_fd();
  inline void clear_has_fd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_;
  ::google::protobuf::int32 segno_;
  ::google::protobuf::int32 port_;
  ::std::string* ip_;
  ::google::protobuf::int32 fd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static filelocation* default_instance_;
};
// -------------------------------------------------------------------

class msgcontainer : public ::google::protobuf::Message {
 public:
  msgcontainer();
  virtual ~msgcontainer();

  msgcontainer(const msgcontainer& from);

  inline msgcontainer& operator=(const msgcontainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msgcontainer& default_instance();

  void Swap(msgcontainer* other);

  // implements Message ----------------------------------------------

  msgcontainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const msgcontainer& from);
  void MergeFrom(const msgcontainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef msgcontainer_type type;
  static const type FILELOCATION = msgcontainer_type_FILELOCATION;
  static const type FILEREAD = msgcontainer_type_FILEREAD;
  static const type FILEWRITE = msgcontainer_type_FILEWRITE;
  static const type DATASERVERREGISTER = msgcontainer_type_DATASERVERREGISTER;
  static const type DATASERVERINFO = msgcontainer_type_DATASERVERINFO;
  static inline bool type_IsValid(int value) {
    return msgcontainer_type_IsValid(value);
  }
  static const type type_MIN =
    msgcontainer_type_type_MIN;
  static const type type_MAX =
    msgcontainer_type_type_MAX;
  static const int type_ARRAYSIZE =
    msgcontainer_type_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_descriptor() {
    return msgcontainer_type_descriptor();
  }
  static inline const ::std::string& type_Name(type value) {
    return msgcontainer_type_Name(value);
  }
  static inline bool type_Parse(const ::std::string& name,
      type* value) {
    return msgcontainer_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .msgcontainer.type msgtype = 1;
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgtypeFieldNumber = 1;
  inline ::msgcontainer_type msgtype() const;
  inline void set_msgtype(::msgcontainer_type value);

  // optional .filerange frange = 2;
  inline bool has_frange() const;
  inline void clear_frange();
  static const int kFrangeFieldNumber = 2;
  inline const ::filerange& frange() const;
  inline ::filerange* mutable_frange();
  inline ::filerange* release_frange();
  inline void set_allocated_frange(::filerange* frange);

  // optional .filelocation floc = 3;
  inline bool has_floc() const;
  inline void clear_floc();
  static const int kFlocFieldNumber = 3;
  inline const ::filelocation& floc() const;
  inline ::filelocation* mutable_floc();
  inline ::filelocation* release_floc();
  inline void set_allocated_floc(::filelocation* floc);

  // optional .dataserverregister dregister = 4;
  inline bool has_dregister() const;
  inline void clear_dregister();
  static const int kDregisterFieldNumber = 4;
  inline const ::dataserverregister& dregister() const;
  inline ::dataserverregister* mutable_dregister();
  inline ::dataserverregister* release_dregister();
  inline void set_allocated_dregister(::dataserverregister* dregister);

  // optional .dataserverinfo dinfo = 5;
  inline bool has_dinfo() const;
  inline void clear_dinfo();
  static const int kDinfoFieldNumber = 5;
  inline const ::dataserverinfo& dinfo() const;
  inline ::dataserverinfo* mutable_dinfo();
  inline ::dataserverinfo* release_dinfo();
  inline void set_allocated_dinfo(::dataserverinfo* dinfo);

  // @@protoc_insertion_point(class_scope:msgcontainer)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_frange();
  inline void clear_has_frange();
  inline void set_has_floc();
  inline void clear_has_floc();
  inline void set_has_dregister();
  inline void clear_has_dregister();
  inline void set_has_dinfo();
  inline void clear_has_dinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::filerange* frange_;
  ::filelocation* floc_;
  ::dataserverregister* dregister_;
  ::dataserverinfo* dinfo_;
  int msgtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static msgcontainer* default_instance_;
};
// ===================================================================


// ===================================================================

// dataserverregister

// required string ip = 1;
inline bool dataserverregister::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dataserverregister::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dataserverregister::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dataserverregister::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& dataserverregister::ip() const {
  return *ip_;
}
inline void dataserverregister::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void dataserverregister::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void dataserverregister::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dataserverregister::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* dataserverregister::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dataserverregister::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool dataserverregister::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dataserverregister::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dataserverregister::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dataserverregister::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 dataserverregister::port() const {
  return port_;
}
inline void dataserverregister::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// dataserverinfo

// optional int32 id = 1;
inline bool dataserverinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dataserverinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dataserverinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dataserverinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dataserverinfo::id() const {
  return id_;
}
inline void dataserverinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string fip = 2;
inline bool dataserverinfo::has_fip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dataserverinfo::set_has_fip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dataserverinfo::clear_has_fip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dataserverinfo::clear_fip() {
  if (fip_ != &::google::protobuf::internal::kEmptyString) {
    fip_->clear();
  }
  clear_has_fip();
}
inline const ::std::string& dataserverinfo::fip() const {
  return *fip_;
}
inline void dataserverinfo::set_fip(const ::std::string& value) {
  set_has_fip();
  if (fip_ == &::google::protobuf::internal::kEmptyString) {
    fip_ = new ::std::string;
  }
  fip_->assign(value);
}
inline void dataserverinfo::set_fip(const char* value) {
  set_has_fip();
  if (fip_ == &::google::protobuf::internal::kEmptyString) {
    fip_ = new ::std::string;
  }
  fip_->assign(value);
}
inline void dataserverinfo::set_fip(const char* value, size_t size) {
  set_has_fip();
  if (fip_ == &::google::protobuf::internal::kEmptyString) {
    fip_ = new ::std::string;
  }
  fip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dataserverinfo::mutable_fip() {
  set_has_fip();
  if (fip_ == &::google::protobuf::internal::kEmptyString) {
    fip_ = new ::std::string;
  }
  return fip_;
}
inline ::std::string* dataserverinfo::release_fip() {
  clear_has_fip();
  if (fip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fip_;
    fip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dataserverinfo::set_allocated_fip(::std::string* fip) {
  if (fip_ != &::google::protobuf::internal::kEmptyString) {
    delete fip_;
  }
  if (fip) {
    set_has_fip();
    fip_ = fip;
  } else {
    clear_has_fip();
    fip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fport = 3;
inline bool dataserverinfo::has_fport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dataserverinfo::set_has_fport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dataserverinfo::clear_has_fport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dataserverinfo::clear_fport() {
  fport_ = 0;
  clear_has_fport();
}
inline ::google::protobuf::int32 dataserverinfo::fport() const {
  return fport_;
}
inline void dataserverinfo::set_fport(::google::protobuf::int32 value) {
  set_has_fport();
  fport_ = value;
}

// optional string eip = 4;
inline bool dataserverinfo::has_eip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dataserverinfo::set_has_eip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dataserverinfo::clear_has_eip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dataserverinfo::clear_eip() {
  if (eip_ != &::google::protobuf::internal::kEmptyString) {
    eip_->clear();
  }
  clear_has_eip();
}
inline const ::std::string& dataserverinfo::eip() const {
  return *eip_;
}
inline void dataserverinfo::set_eip(const ::std::string& value) {
  set_has_eip();
  if (eip_ == &::google::protobuf::internal::kEmptyString) {
    eip_ = new ::std::string;
  }
  eip_->assign(value);
}
inline void dataserverinfo::set_eip(const char* value) {
  set_has_eip();
  if (eip_ == &::google::protobuf::internal::kEmptyString) {
    eip_ = new ::std::string;
  }
  eip_->assign(value);
}
inline void dataserverinfo::set_eip(const char* value, size_t size) {
  set_has_eip();
  if (eip_ == &::google::protobuf::internal::kEmptyString) {
    eip_ = new ::std::string;
  }
  eip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dataserverinfo::mutable_eip() {
  set_has_eip();
  if (eip_ == &::google::protobuf::internal::kEmptyString) {
    eip_ = new ::std::string;
  }
  return eip_;
}
inline ::std::string* dataserverinfo::release_eip() {
  clear_has_eip();
  if (eip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = eip_;
    eip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dataserverinfo::set_allocated_eip(::std::string* eip) {
  if (eip_ != &::google::protobuf::internal::kEmptyString) {
    delete eip_;
  }
  if (eip) {
    set_has_eip();
    eip_ = eip;
  } else {
    clear_has_eip();
    eip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 eport = 5;
inline bool dataserverinfo::has_eport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dataserverinfo::set_has_eport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dataserverinfo::clear_has_eport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dataserverinfo::clear_eport() {
  eport_ = 0;
  clear_has_eport();
}
inline ::google::protobuf::int32 dataserverinfo::eport() const {
  return eport_;
}
inline void dataserverinfo::set_eport(::google::protobuf::int32 value) {
  set_has_eport();
  eport_ = value;
}

// -------------------------------------------------------------------

// filerange

// required string file = 1;
inline bool filerange::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void filerange::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void filerange::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void filerange::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& filerange::file() const {
  return *file_;
}
inline void filerange::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void filerange::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void filerange::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* filerange::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* filerange::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void filerange::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 fileID = 2;
inline bool filerange::has_fileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void filerange::set_has_fileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void filerange::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void filerange::clear_fileid() {
  fileid_ = 0;
  clear_has_fileid();
}
inline ::google::protobuf::int32 filerange::fileid() const {
  return fileid_;
}
inline void filerange::set_fileid(::google::protobuf::int32 value) {
  set_has_fileid();
  fileid_ = value;
}

// required int32 segno = 3;
inline bool filerange::has_segno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void filerange::set_has_segno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void filerange::clear_has_segno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void filerange::clear_segno() {
  segno_ = 0;
  clear_has_segno();
}
inline ::google::protobuf::int32 filerange::segno() const {
  return segno_;
}
inline void filerange::set_segno(::google::protobuf::int32 value) {
  set_has_segno();
  segno_ = value;
}

// required int32 offset = 4;
inline bool filerange::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void filerange::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void filerange::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void filerange::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 filerange::offset() const {
  return offset_;
}
inline void filerange::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 length = 5;
inline bool filerange::has_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void filerange::set_has_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void filerange::clear_has_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void filerange::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 filerange::length() const {
  return length_;
}
inline void filerange::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// required bool isMsgFromCL = 6;
inline bool filerange::has_ismsgfromcl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void filerange::set_has_ismsgfromcl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void filerange::clear_has_ismsgfromcl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void filerange::clear_ismsgfromcl() {
  ismsgfromcl_ = false;
  clear_has_ismsgfromcl();
}
inline bool filerange::ismsgfromcl() const {
  return ismsgfromcl_;
}
inline void filerange::set_ismsgfromcl(bool value) {
  set_has_ismsgfromcl();
  ismsgfromcl_ = value;
}

// -------------------------------------------------------------------

// filelocation

// required int32 segno = 1;
inline bool filelocation::has_segno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void filelocation::set_has_segno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void filelocation::clear_has_segno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void filelocation::clear_segno() {
  segno_ = 0;
  clear_has_segno();
}
inline ::google::protobuf::int32 filelocation::segno() const {
  return segno_;
}
inline void filelocation::set_segno(::google::protobuf::int32 value) {
  set_has_segno();
  segno_ = value;
}

// optional string file = 2;
inline bool filelocation::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void filelocation::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void filelocation::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void filelocation::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& filelocation::file() const {
  return *file_;
}
inline void filelocation::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void filelocation::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void filelocation::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* filelocation::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* filelocation::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void filelocation::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 3;
inline bool filelocation::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void filelocation::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void filelocation::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void filelocation::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& filelocation::ip() const {
  return *ip_;
}
inline void filelocation::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void filelocation::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void filelocation::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* filelocation::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* filelocation::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void filelocation::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool filelocation::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void filelocation::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void filelocation::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void filelocation::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 filelocation::port() const {
  return port_;
}
inline void filelocation::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 fd = 5;
inline bool filelocation::has_fd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void filelocation::set_has_fd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void filelocation::clear_has_fd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void filelocation::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
inline ::google::protobuf::int32 filelocation::fd() const {
  return fd_;
}
inline void filelocation::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
}

// -------------------------------------------------------------------

// msgcontainer

// required .msgcontainer.type msgtype = 1;
inline bool msgcontainer::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msgcontainer::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msgcontainer::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msgcontainer::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
inline ::msgcontainer_type msgcontainer::msgtype() const {
  return static_cast< ::msgcontainer_type >(msgtype_);
}
inline void msgcontainer::set_msgtype(::msgcontainer_type value) {
  assert(::msgcontainer_type_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
}

// optional .filerange frange = 2;
inline bool msgcontainer::has_frange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msgcontainer::set_has_frange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msgcontainer::clear_has_frange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msgcontainer::clear_frange() {
  if (frange_ != NULL) frange_->::filerange::Clear();
  clear_has_frange();
}
inline const ::filerange& msgcontainer::frange() const {
  return frange_ != NULL ? *frange_ : *default_instance_->frange_;
}
inline ::filerange* msgcontainer::mutable_frange() {
  set_has_frange();
  if (frange_ == NULL) frange_ = new ::filerange;
  return frange_;
}
inline ::filerange* msgcontainer::release_frange() {
  clear_has_frange();
  ::filerange* temp = frange_;
  frange_ = NULL;
  return temp;
}
inline void msgcontainer::set_allocated_frange(::filerange* frange) {
  delete frange_;
  frange_ = frange;
  if (frange) {
    set_has_frange();
  } else {
    clear_has_frange();
  }
}

// optional .filelocation floc = 3;
inline bool msgcontainer::has_floc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msgcontainer::set_has_floc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msgcontainer::clear_has_floc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msgcontainer::clear_floc() {
  if (floc_ != NULL) floc_->::filelocation::Clear();
  clear_has_floc();
}
inline const ::filelocation& msgcontainer::floc() const {
  return floc_ != NULL ? *floc_ : *default_instance_->floc_;
}
inline ::filelocation* msgcontainer::mutable_floc() {
  set_has_floc();
  if (floc_ == NULL) floc_ = new ::filelocation;
  return floc_;
}
inline ::filelocation* msgcontainer::release_floc() {
  clear_has_floc();
  ::filelocation* temp = floc_;
  floc_ = NULL;
  return temp;
}
inline void msgcontainer::set_allocated_floc(::filelocation* floc) {
  delete floc_;
  floc_ = floc;
  if (floc) {
    set_has_floc();
  } else {
    clear_has_floc();
  }
}

// optional .dataserverregister dregister = 4;
inline bool msgcontainer::has_dregister() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msgcontainer::set_has_dregister() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msgcontainer::clear_has_dregister() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msgcontainer::clear_dregister() {
  if (dregister_ != NULL) dregister_->::dataserverregister::Clear();
  clear_has_dregister();
}
inline const ::dataserverregister& msgcontainer::dregister() const {
  return dregister_ != NULL ? *dregister_ : *default_instance_->dregister_;
}
inline ::dataserverregister* msgcontainer::mutable_dregister() {
  set_has_dregister();
  if (dregister_ == NULL) dregister_ = new ::dataserverregister;
  return dregister_;
}
inline ::dataserverregister* msgcontainer::release_dregister() {
  clear_has_dregister();
  ::dataserverregister* temp = dregister_;
  dregister_ = NULL;
  return temp;
}
inline void msgcontainer::set_allocated_dregister(::dataserverregister* dregister) {
  delete dregister_;
  dregister_ = dregister;
  if (dregister) {
    set_has_dregister();
  } else {
    clear_has_dregister();
  }
}

// optional .dataserverinfo dinfo = 5;
inline bool msgcontainer::has_dinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void msgcontainer::set_has_dinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void msgcontainer::clear_has_dinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void msgcontainer::clear_dinfo() {
  if (dinfo_ != NULL) dinfo_->::dataserverinfo::Clear();
  clear_has_dinfo();
}
inline const ::dataserverinfo& msgcontainer::dinfo() const {
  return dinfo_ != NULL ? *dinfo_ : *default_instance_->dinfo_;
}
inline ::dataserverinfo* msgcontainer::mutable_dinfo() {
  set_has_dinfo();
  if (dinfo_ == NULL) dinfo_ = new ::dataserverinfo;
  return dinfo_;
}
inline ::dataserverinfo* msgcontainer::release_dinfo() {
  clear_has_dinfo();
  ::dataserverinfo* temp = dinfo_;
  dinfo_ = NULL;
  return temp;
}
inline void msgcontainer::set_allocated_dinfo(::dataserverinfo* dinfo) {
  delete dinfo_;
  dinfo_ = dinfo;
  if (dinfo) {
    set_has_dinfo();
  } else {
    clear_has_dinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msgcontainer_type>() {
  return ::msgcontainer_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
